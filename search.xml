<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DataSearch-API</title>
    <url>/posts/hello_url.html</url>
    <content><![CDATA[<h1 id="DataSearch-服务接口指南"><a href="#DataSearch-服务接口指南" class="headerlink" title="DataSearch-服务接口指南"></a>DataSearch-服务接口指南</h1><p><strong>版本：1.0.0</strong></p>
<p>数据模糊搜索功能</p>
<h2 id="接口用法"><a href="#接口用法" class="headerlink" title="接口用法"></a>接口用法</h2><p>命名空间：<strong>GeoBOS.ds</strong></p>
<h3 id="search-words-options-list-callback"><a href="#search-words-options-list-callback" class="headerlink" title="search(words, options, list, callback)"></a>search(words, options, list, callback)</h3><p>模糊搜索功能。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>words</td>
<td><code>Object</code> or <code>String</code></td>
<td>搜索的内容</td>
</tr>
<tr>
<td>options</td>
<td><code>Object</code></td>
<td>搜索的控件</td>
</tr>
<tr>
<td>list</td>
<td><code>Array</code></td>
<td>搜索的范围</td>
</tr>
<tr>
<td>callback</td>
<td><code>Function</code></td>
<td>回调函数</td>
</tr>
</tbody></table>
<h4 id="words"><a href="#words" class="headerlink" title="words"></a>words</h4><p>words参数为<code>Object</code>时可以使用逻辑查询运算符。这些运算符用于过滤数据并根据给定条件获得精确结果。下表包含逻辑查询运算符：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$and</td>
<td>返回符合所有子句条件的所有文档</td>
</tr>
<tr>
<td>$or</td>
<td>返回符合任何子句条件的所有文档</td>
</tr>
</tbody></table>
<h5 id="格式样例"><a href="#格式样例" class="headerlink" title="格式样例"></a>格式样例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">$and</span>: [ &#123; &lt;expression_1&gt; &#125;, &#123; &lt;expression_2&gt; &#125; , ... , &#123; &lt;expression_N&gt; &#125; ] &#125;</span><br></pre></td></tr></table></figure>

<p>操作者执行的逻辑AND或OR表达式和选择满足所有表达式中的条目的阵列上操作。$and/$or的操作者使用短路评价：即如果$and的第一表达式的值为false，或$or的第一表达式的值为true，GeoBOS.ds.search不会评价剩余的表达式</p>
<h5 id="and样例"><a href="#and样例" class="headerlink" title="$and样例"></a>$and样例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = &#123;</span><br><span class="line">  $and: [&#123; <span class="attr">author</span>: <span class="string">'abc'</span> &#125;, &#123; <span class="attr">title</span>: <span class="string">'xyz'</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="or样例"><a href="#or样例" class="headerlink" title="$or样例"></a>$or样例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = &#123;</span><br><span class="line">  $or: [&#123; <span class="attr">author</span>: <span class="string">'abc'</span> &#125;, &#123; <span class="attr">author</span>: <span class="string">'def'</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="同时还可以与扩展搜索进行匹配"><a href="#同时还可以与扩展搜索进行匹配" class="headerlink" title="同时还可以与扩展搜索进行匹配"></a>同时还可以与扩展搜索进行匹配</h5><p>这种高级搜索形式使您可以微调结果。</p>
<p>空格用作AND运算符，而单个竖线（|）字符用作OR运算符。要转义空格，请使用双引号，例如使用<code>=&quot;scheme language&quot;</code>进行精确匹配。</p>
<table>
<thead>
<tr>
<th>示例</th>
<th>类型</th>
<th>示例描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>jscript</code></td>
<td>模糊匹配</td>
<td>模糊匹配jscript的项目</td>
</tr>
<tr>
<td><code>=scheme</code></td>
<td>完全符合</td>
<td>完全符合scheme的项目</td>
</tr>
<tr>
<td><code>&#39;python</code></td>
<td>包含匹配</td>
<td>包含python的项目</td>
</tr>
<tr>
<td><code>!ruby</code></td>
<td>完全相反的匹配</td>
<td>不包含ruby的项目</td>
</tr>
<tr>
<td><code>^java</code></td>
<td>前缀匹配</td>
<td>以java开头的项目</td>
</tr>
<tr>
<td><code>!^earlang</code></td>
<td>前缀不匹配</td>
<td>不以earlang开头的项目</td>
</tr>
<tr>
<td><code>.js$</code></td>
<td>后缀匹配</td>
<td>以.js结尾的项目</td>
</tr>
<tr>
<td><code>!.go$</code></td>
<td>后缀匹配</td>
<td>不以.go结尾的项目</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = &#123;</span><br><span class="line">  $and: [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'old war'</span> &#125;, <span class="comment">// Fuzzy "old war"</span></span><br><span class="line">    &#123; <span class="attr">color</span>: <span class="string">"'blue"</span> &#125;, <span class="comment">// Exact match for blue</span></span><br><span class="line">    &#123;</span><br><span class="line">      $or: [</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">'^lock'</span> &#125;, <span class="comment">// Starts with "lock"</span></span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">'!arts'</span> &#125; <span class="comment">// Does not have "arts"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>options作为搜索控件有如下的属性</p>
<h5 id="基本选项"><a href="#基本选项" class="headerlink" title="基本选项"></a>基本选项</h5><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>isCaseSensitive</td>
<td><code>boolean</code></td>
<td>false</td>
<td>指示是否区分大小写</td>
</tr>
<tr>
<td>includeScore</td>
<td><code>boolean</code></td>
<td>false</td>
<td>分数是否应包括在结果集中。得分0表示完全匹配，而得分1表示完全不匹配</td>
</tr>
<tr>
<td>includeMatches</td>
<td><code>boolean</code></td>
<td>false</td>
<td>是否将匹配项包含在结果集中。true时，结果集中的每个记录都将包含匹配字符的索引。</td>
</tr>
<tr>
<td>minMatchCharLength</td>
<td><code>boolean</code></td>
<td>false</td>
<td>指示是否区分大小写</td>
</tr>
<tr>
<td>isCaseSensitive</td>
<td><code>number</code></td>
<td>1</td>
<td>仅返回长度超过该值的匹配项。例如要忽略结果中的单个字符匹配，请将其设置为2</td>
</tr>
<tr>
<td>shouldSort</td>
<td><code>boolean</code></td>
<td>true</td>
<td>是否按分数对结果列表进行排序</td>
</tr>
<tr>
<td>findAllMatches</td>
<td><code>boolean</code></td>
<td>false</td>
<td>设置为true时，即使在字符串中已经找到了完全匹配项，匹配函数也将继续搜索模式的结尾。</td>
</tr>
<tr>
<td>keys</td>
<td><code>Array</code></td>
<td>[ ]</td>
<td>将搜索的键列表。这支持嵌套路径，加权搜索，字符串和对象数组的搜索</td>
</tr>
</tbody></table>
<p>keys属性中，可以为关键字分配权重，以在搜索结果中为其赋予更高（或更低）的值。该weight值必须大于0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  includeScore: <span class="literal">true</span>,</span><br><span class="line">  keys: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'title'</span>,</span><br><span class="line">      weight: <span class="number">0.3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'author'</span>,</span><br><span class="line">      weight: <span class="number">0.7</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="模糊匹配选项"><a href="#模糊匹配选项" class="headerlink" title="模糊匹配选项"></a>模糊匹配选项</h5><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>location</td>
<td><code>number</code></td>
<td>0</td>
<td>确定大约在文本中的位置是期望找到的模式</td>
</tr>
<tr>
<td>threshold</td>
<td><code>number</code></td>
<td>0.6</td>
<td>匹配算法在什么时候放弃。阈值0.0要求完全匹配(字母和位置均需匹配)，阈值1.0会匹配任何内容。</td>
</tr>
<tr>
<td>distance</td>
<td><code>number</code></td>
<td>100</td>
<td>确定匹配必须与模糊位置（由指定location）之间的接近程度。</td>
</tr>
<tr>
<td>ignoreLocation</td>
<td><code>boolean</code></td>
<td>false</td>
<td>当使用时true，搜索将忽略location和distance，因此匹配字符出现在字符串中的位置无关紧要</td>
</tr>
</tbody></table>
<h5 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h5><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>useExtendedSearch</td>
<td><code>boolean</code></td>
<td>false</td>
<td>如果为true，则启用类Unix搜索命令的使用，详见扩展words参数中扩展搜索功能示例</td>
</tr>
<tr>
<td>getFn</td>
<td><code>Function</code></td>
<td>(obj: T, path: string</td>
<td>string[]) =&gt; string</td>
</tr>
<tr>
<td>sortFn</td>
<td><code>Function</code></td>
<td>(a, b) =&gt; number</td>
<td>用于对所有结果进行排序的函数。默认值将按相关性得分递增，索引递增排序</td>
</tr>
<tr>
<td>ignoreFieldNorm</td>
<td><code>boolean</code></td>
<td>false</td>
<td>当时true，相关性得分的计算（用于排序）将忽略字段长度范数。</td>
</tr>
</tbody></table>
<p>设置ignoreFieldNorm为true唯一有意义的时间是，无论多少个术语都无关紧要，而只查询存在术语。</p>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>搜索的范围可以是一个字符串数组或是一个对象数组</p>
<p>可以通过使用点（.）或数组表示法提供路径来搜索嵌套值，该路径最终必须指向字符串，否则您将不会获得任何结果</p>
<h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"Old Man's War"</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">      name: <span class="string">'John Scalzi'</span>,</span><br><span class="line">      tags: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="string">'American'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'The Lock Artist'</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">      name: <span class="string">'Steve Hamilton'</span>,</span><br><span class="line">      tags: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="string">'English'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  includeScore: <span class="literal">true</span>,</span><br><span class="line">  keys: [<span class="string">'author.tags.value'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GeoBOS.ds.search(<span class="string">'engsh'</span>, options, list, <span class="function"><span class="keyword">function</span> (<span class="params">err,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(version)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h4><p>回调函数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>err</td>
<td><code>Error</code></td>
<td>错误信息, 调用成功时为null</td>
</tr>
<tr>
<td>res</td>
<td><code>Object</code></td>
<td>搜索的结果</td>
</tr>
</tbody></table>
<p>回调函数会需要根据options的配置情况（是否包含模糊匹配得分等）返回指定属性的对象，如果只需返回结果对象，可用res.item</p>
<h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  includeScore: <span class="literal">true</span>,</span><br><span class="line">  keys: [<span class="string">'msg'</span>, <span class="string">'from_name'</span>, <span class="string">'plotName'</span>, <span class="string">'description'</span>],</span><br><span class="line">  threshold: <span class="number">0.7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若只返回结果数组</span></span><br><span class="line">GeoBOS.ds.search(word, options, list, <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!err)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(res[i].item))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<a id="more"></a>
<p>这是阅读全文</p>
<img src= "/img/loading.gif" data-lazy-src="/images/404.jpg" class="">
]]></content>
      <categories>
        <category>分类1</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
      </tags>
  </entry>
</search>
